var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { isReactive, } from '@motion-canvas/core/lib/signals';
import { BBox, Vector2, } from '@motion-canvas/core/lib/types';
import { useLogger } from '@motion-canvas/core/lib/utils';
import { CubicBezierSegment, getBezierSplineProfile, } from '../curves';
import { computed, initial, signal } from '../decorators';
import { arc, bezierCurveTo, drawLine, lineTo, moveTo, quadraticCurveTo, } from '../utils';
import { Curve } from './Curve';
import { Knot } from './Knot';
/**
 * A node for drawing a smooth line through a number of points.
 *
 * @remarks
 * This node uses BÃ©zier curves for drawing each segment of the spline.
 *
 * @example
 * Defining knots using the `points` property. This will automatically
 * calculate the handle positions for each knot do draw a smooth curve. You
 * can control the smoothness of the resulting curve via the
 * {@link Spline.smoothness} property:
 *
 * ```tsx
 * <Spline
 *   lineWidth={4}
 *   stroke={'white'}
 *   smoothness={0.4}
 *   points={[
 *     [-400, 0],
 *     [-200, -300],
 *     [0, 0],
 *     [200, -300],
 *     [400, 0],
 *   ]}
 * />
 * ```
 *
 * Defining knots with {@link Knot} nodes:
 *
 * ```tsx
 * <Spline lineWidth={4} stroke={'white'}>
 *   <Knot position={[-400, 0]} />
 *   <Knot position={[-200, -300]} />
 *   <Knot
 *     position={[0, 0]}
 *     startHandle={[-100, 200]}
 *     endHandle={[100, 200]}
 *   />
 *   <Knot position={[200, -300]} />
 *   <Knot position={[400, 0]} />
 * </Spline>
 * ```
 */
export class Spline extends Curve {
    constructor(props) {
        super(props);
        if ((props.children === undefined || props.children.length < 2) &&
            (props.points === undefined || props.points.length < 2) &&
            props.spawner === undefined) {
            useLogger().warn({
                message: 'Insufficient number of knots specified for spline. A spline needs at least two knots.',
                remarks: "<p>The spline won&#39;t be visible unless you specify at least two knots:</p>\n<pre><code class=\"language-tsx\">&lt;<span class=\"hljs-title class_\">Spline</span>\n  stroke=<span class=\"hljs-string\">&quot;#fff&quot;</span>\n  lineWidth={<span class=\"hljs-number\">8</span>}\n  points={[\n    [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>],\n  ]}\n/&gt;\n</code></pre>\n<p>For more control over the knot handles, you can alternatively provide the knots\nas children to the spline using the <code>Knot</code> component:</p>\n<pre><code class=\"language-tsx\">&lt;<span class=\"hljs-title class_\">Spline</span> stroke=<span class=\"hljs-string\">&quot;#fff&quot;</span> lineWidth={<span class=\"hljs-number\">8</span>}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Knot</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">{100}</span> <span class=\"hljs-attr\">endHandle</span>=<span class=\"hljs-string\">{[-50,</span> <span class=\"hljs-attr\">0</span>]} /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Knot</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Knot</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">{100}</span> <span class=\"hljs-attr\">startHandle</span>=<span class=\"hljs-string\">{[-100,</span> <span class=\"hljs-attr\">50</span>]} /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Spline</span>&gt;\n</code></pre>\n",
                inspect: this.key,
            });
        }
    }
    profile() {
        return getBezierSplineProfile(this.knots(), this.closed(), this.smoothness());
    }
    knots() {
        const points = this.points();
        if (points) {
            return points.map(signal => {
                const point = new Vector2(isReactive(signal) ? signal() : signal);
                return {
                    position: point,
                    startHandle: point,
                    endHandle: point,
                    auto: { start: 1, end: 1 },
                };
            });
        }
        return this.children()
            .filter(this.isKnot)
            .map(knot => knot.points());
    }
    childrenBBox() {
        const points = this.profile().segments.flatMap(segment => segment.points);
        return BBox.fromPoints(...points);
    }
    lineWidthCoefficient() {
        const join = this.lineJoin();
        let coefficient = super.lineWidthCoefficient();
        if (join !== 'miter') {
            return coefficient;
        }
        const { minSin } = this.profile();
        if (minSin > 0) {
            coefficient = Math.max(coefficient, 0.5 / minSin);
        }
        return coefficient;
    }
    desiredSize() {
        return this.getTightBBox().size;
    }
    offsetComputedLayout(box) {
        box.position = box.position.sub(this.getTightBBox().center);
        return box;
    }
    getTightBBox() {
        const bounds = this.profile().segments.map(segment => segment.getBBox());
        return BBox.fromBBoxes(...bounds);
    }
    drawOverlay(context, matrix) {
        const size = this.computedSize();
        const box = this.childrenBBox().transformCorners(matrix);
        const offset = size.mul(this.offset()).scale(0.5).transformAsPoint(matrix);
        const segments = this.profile().segments;
        context.lineWidth = 1;
        context.strokeStyle = 'white';
        context.fillStyle = 'white';
        const splinePath = new Path2D();
        // Draw the actual spline first so that all control points get drawn on top of it.
        for (let i = 0; i < segments.length; i++) {
            const segment = segments[i];
            const [from, startHandle, endHandle, to] = segment.transformPoints(matrix);
            moveTo(splinePath, from);
            if (segment instanceof CubicBezierSegment) {
                bezierCurveTo(splinePath, startHandle, endHandle, to);
            }
            else {
                quadraticCurveTo(splinePath, startHandle, endHandle);
            }
        }
        context.stroke(splinePath);
        for (let i = 0; i < segments.length; i++) {
            const segment = segments[i];
            context.fillStyle = 'white';
            const [from, startHandle, endHandle, to] = segment.transformPoints(matrix);
            const handlePath = new Path2D();
            context.globalAlpha = 0.5;
            // Line from p0 to p1
            moveTo(handlePath, from);
            lineTo(handlePath, startHandle);
            if (segment instanceof CubicBezierSegment) {
                // Line from p2 to p3
                moveTo(handlePath, endHandle);
                lineTo(handlePath, to);
                context.beginPath();
                context.stroke(handlePath);
            }
            else {
                // Line from p1 to p2
                lineTo(handlePath, endHandle);
                context.beginPath();
                context.stroke(handlePath);
            }
            context.globalAlpha = 1;
            context.lineWidth = 2;
            // Draw first point of segment
            moveTo(context, from);
            context.beginPath();
            arc(context, from, 4);
            context.closePath();
            context.stroke();
            context.fill();
            // Draw final point of segment only if we're on the last segment.
            // Otherwise, it will get drawn as the start point of the next segment.
            if (i === segments.length - 1) {
                if (to !== undefined) {
                    moveTo(context, to);
                    context.beginPath();
                    arc(context, to, 4);
                    context.closePath();
                    context.stroke();
                    context.fill();
                }
            }
            // Draw the control points
            context.fillStyle = 'black';
            for (const point of [startHandle, endHandle]) {
                if (point.magnitude > 0) {
                    moveTo(context, point);
                    context.beginPath();
                    arc(context, point, 4);
                    context.closePath();
                    context.fill();
                    context.stroke();
                }
            }
        }
        context.lineWidth = 1;
        const radius = 8;
        context.beginPath();
        lineTo(context, offset.addY(-radius));
        lineTo(context, offset.addY(radius));
        lineTo(context, offset);
        lineTo(context, offset.addX(-radius));
        context.arc(offset.x, offset.y, radius, 0, Math.PI * 2);
        context.stroke();
        context.beginPath();
        drawLine(context, box);
        context.closePath();
        context.stroke();
    }
    isKnot(node) {
        return node instanceof Knot;
    }
}
__decorate([
    initial(0.4),
    signal()
], Spline.prototype, "smoothness", void 0);
__decorate([
    initial(null),
    signal()
], Spline.prototype, "points", void 0);
__decorate([
    computed()
], Spline.prototype, "profile", null);
__decorate([
    computed()
], Spline.prototype, "knots", null);
__decorate([
    computed()
], Spline.prototype, "childrenBBox", null);
__decorate([
    computed()
], Spline.prototype, "getTightBBox", null);
//# sourceMappingURL=data:application/json;base64,