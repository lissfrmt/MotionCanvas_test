import { SignalValue, SimpleSignal } from '@motion-canvas/core/lib/signals';
import { BBox, SerializedVector2 } from '@motion-canvas/core/lib/types';
import { CurveDrawingInfo, CurvePoint, CurveProfile } from '../curves';
import { DesiredLength } from '../partials';
import { Node } from './Node';
import { Shape, ShapeProps } from './Shape';
export interface CurveProps extends ShapeProps {
    children?: Node[];
    closed?: SignalValue<boolean>;
    start?: SignalValue<number>;
    startOffset?: SignalValue<number>;
    startArrow?: SignalValue<boolean>;
    end?: SignalValue<number>;
    endOffset?: SignalValue<number>;
    endArrow?: SignalValue<boolean>;
    arrowSize?: SignalValue<number>;
}
export declare abstract class Curve extends Shape {
    readonly closed: SimpleSignal<boolean, this>;
    readonly start: SimpleSignal<number, this>;
    readonly startOffset: SimpleSignal<number, this>;
    readonly startArrow: SimpleSignal<boolean, this>;
    readonly end: SimpleSignal<number, this>;
    readonly endOffset: SimpleSignal<number, this>;
    readonly endArrow: SimpleSignal<boolean, this>;
    readonly arrowSize: SimpleSignal<number, this>;
    protected desiredSize(): SerializedVector2<DesiredLength>;
    constructor(props: CurveProps);
    protected abstract childrenBBox(): BBox;
    abstract profile(): CurveProfile;
    percentageToDistance(value: number): number;
    protected curveDrawingInfo(): CurveDrawingInfo;
    protected getPointAtDistance(value: number): CurvePoint;
    getPointAtPercentage(value: number): CurvePoint;
    protected applyStyle(context: CanvasRenderingContext2D): void;
    protected getComputedLayout(): BBox;
    protected offsetComputedLayout(box: BBox): BBox;
    protected getPath(): Path2D;
    protected getCacheBBox(): BBox;
    protected lineWidthCoefficient(): number;
    protected drawShape(context: CanvasRenderingContext2D): void;
    private drawArrow;
}
//# sourceMappingURL=Curve.d.ts.map