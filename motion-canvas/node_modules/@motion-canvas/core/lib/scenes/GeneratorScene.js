import { isPromisable, isPromise, threads, } from '../threading';
import { Variables } from './Variables';
import { EventDispatcher, ValueDispatcher } from '../events';
import { decorate, threadable } from '../decorators';
import { endPlayback, endScene, startPlayback, startScene } from '../utils';
import { LifecycleEvents } from './LifecycleEvents';
import { BBox } from '../types';
import { SceneState } from './SceneState';
import { Random } from './Random';
import { DependencyContext } from '../signals';
import { Slides } from './Slides';
/**
 * The default implementation of the {@link Scene} interface.
 *
 * Uses generators to control the animation.
 */
export class GeneratorScene {
    get firstFrame() {
        return this.cache.current.firstFrame;
    }
    get lastFrame() {
        return this.firstFrame + this.cache.current.duration;
    }
    get onCacheChanged() {
        return this.cache.subscribable;
    }
    get onReloaded() {
        return this.reloaded.subscribable;
    }
    get onRecalculated() {
        return this.recalculated.subscribable;
    }
    get onThreadChanged() {
        return this.thread.subscribable;
    }
    get onRenderLifecycle() {
        return this.renderLifecycle.subscribable;
    }
    get onReset() {
        return this.afterReset.subscribable;
    }
    // eslint-disable-next-line @typescript-eslint/naming-convention
    get LifecycleEvents() {
        this.logger.warn('LifecycleEvents is deprecated. Use lifecycleEvents instead.');
        return this.lifecycleEvents;
    }
    get previous() {
        return this.previousScene;
    }
    constructor(description) {
        this.cache = new ValueDispatcher({
            firstFrame: 0,
            transitionDuration: 0,
            duration: 0,
            lastFrame: 0,
        });
        this.reloaded = new EventDispatcher();
        this.recalculated = new EventDispatcher();
        this.thread = new ValueDispatcher(null);
        this.renderLifecycle = new EventDispatcher();
        this.afterReset = new EventDispatcher();
        this.lifecycleEvents = new LifecycleEvents(this);
        this.previousScene = null;
        this.runner = null;
        this.state = SceneState.Initial;
        this.cached = false;
        this.counters = {};
        this.name = description.name;
        this.size = description.size;
        this.resolutionScale = description.resolutionScale;
        this.logger = description.logger;
        this.playback = description.playback;
        this.meta = description.meta;
        this.runnerFactory = description.config;
        this.creationStack = description.stack;
        decorate(this.runnerFactory, threadable(this.name));
        this.timeEvents = new description.timeEventsClass(this);
        this.variables = new Variables(this);
        this.slides = new Slides(this);
        this.random = new Random(this.meta.seed.get());
    }
    /**
     * Update the view.
     *
     * Invoked after each step of the main generator.
     * Can be used for calculating layout.
     *
     * Can modify the state of the view.
     */
    update() {
        // do nothing
    }
    async render(context) {
        let promises = DependencyContext.consumePromises();
        let iterations = 0;
        do {
            iterations++;
            await Promise.all(promises.map(handle => handle.promise));
            context.save();
            const box = BBox.fromSizeCentered(this.getSize());
            context.clearRect(box.x, box.y, box.width, box.height);
            this.execute(() => this.draw(context));
            context.restore();
            promises = DependencyContext.consumePromises();
        } while (promises.length > 0 && iterations < 10);
        if (iterations > 1) {
            this.logger.debug(`render iterations: ${iterations}`);
        }
    }
    reload({ config, size, stack, resolutionScale, } = {}) {
        if (config) {
            this.runnerFactory = config;
        }
        if (size) {
            this.size = size;
        }
        if (resolutionScale) {
            this.resolutionScale = resolutionScale;
        }
        if (stack) {
            this.creationStack = stack;
        }
        this.cached = false;
        this.reloaded.dispatch();
    }
    async recalculate(setFrame) {
        const cached = this.cache.current;
        cached.firstFrame = this.playback.frame;
        cached.lastFrame = cached.firstFrame + cached.duration;
        if (this.isCached()) {
            setFrame(cached.lastFrame);
            this.cache.current = { ...cached };
            return;
        }
        cached.transitionDuration = -1;
        await this.reset();
        while (!this.canTransitionOut()) {
            if (cached.transitionDuration < 0 &&
                this.state === SceneState.AfterTransitionIn) {
                cached.transitionDuration = this.playback.frame - cached.firstFrame;
            }
            setFrame(this.playback.frame + 1);
            await this.next();
        }
        if (cached.transitionDuration === -1) {
            cached.transitionDuration = 0;
        }
        cached.lastFrame = this.playback.frame;
        cached.duration = cached.lastFrame - cached.firstFrame;
        // Prevent the page from becoming unresponsive.
        await new Promise(resolve => setTimeout(resolve, 0));
        this.cached = true;
        this.cache.current = { ...cached };
        this.recalculated.dispatch();
    }
    async next() {
        if (!this.runner) {
            return;
        }
        let result = this.execute(() => this.runner.next());
        this.update();
        while (result.value) {
            if (isPromisable(result.value)) {
                const value = await result.value.toPromise();
                result = this.execute(() => this.runner.next(value));
            }
            else if (isPromise(result.value)) {
                const value = await result.value;
                result = this.execute(() => this.runner.next(value));
            }
            else {
                this.logger.warn({
                    message: 'Invalid value yielded by the scene.',
                    object: result.value,
                });
                result = this.execute(() => this.runner.next(result.value));
            }
            this.update();
        }
        const promises = DependencyContext.consumePromises();
        if (promises.length > 0) {
            await Promise.all(promises.map(handle => handle.promise));
            this.logger.error({
                message: 'Tried to access an asynchronous property before the node was ready. ' +
                    'Make sure to yield the node before accessing the property.',
                stack: promises[0].stack,
                inspect: promises[0].owner?.key ?? undefined,
            });
        }
        if (result.done) {
            this.state = SceneState.Finished;
        }
    }
    async reset(previousScene = null) {
        this.counters = {};
        this.previousScene = previousScene;
        this.random = new Random(this.meta.seed.get());
        this.runner = threads(() => this.runnerFactory(this.getView()), thread => {
            this.thread.current = thread;
        });
        this.state = SceneState.AfterTransitionIn;
        this.afterReset.dispatch();
        await this.next();
    }
    getSize() {
        return this.size;
    }
    isAfterTransitionIn() {
        return this.state === SceneState.AfterTransitionIn;
    }
    canTransitionOut() {
        return (this.state === SceneState.CanTransitionOut ||
            this.state === SceneState.Finished);
    }
    isFinished() {
        return this.state === SceneState.Finished;
    }
    enterInitial() {
        if (this.state === SceneState.AfterTransitionIn) {
            this.state = SceneState.Initial;
        }
        else {
            this.logger.warn(`Scene ${this.name} entered initial in an unexpected state: ${this.state}`);
        }
    }
    enterAfterTransitionIn() {
        if (this.state === SceneState.Initial) {
            this.state = SceneState.AfterTransitionIn;
        }
        else {
            this.logger.warn(`Scene ${this.name} transitioned in an unexpected state: ${this.state}`);
        }
    }
    enterCanTransitionOut() {
        if (this.state === SceneState.AfterTransitionIn ||
            this.state === SceneState.Initial // only on recalculate
        ) {
            this.state = SceneState.CanTransitionOut;
        }
        else {
            this.logger.warn(`Scene ${this.name} was marked as finished in an unexpected state: ${this.state}`);
        }
    }
    isCached() {
        return this.cached;
    }
    /**
     * Invoke the given callback in the context of this scene.
     *
     * @remarks
     * This method makes sure that the context of this scene is globally available
     * during the execution of the callback.
     *
     * @param callback - The callback to invoke.
     */
    execute(callback) {
        let result;
        startScene(this);
        startPlayback(this.playback);
        try {
            result = callback();
        }
        finally {
            endPlayback(this.playback);
            endScene(this);
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,