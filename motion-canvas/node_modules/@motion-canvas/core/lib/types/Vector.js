import { arcLerp } from '../tweening';
import { map } from '../tweening/interpolationFunctions';
import { Direction, Origin } from './Origin';
import { EPSILON } from './Type';
import { CompoundSignalContext, } from '../signals';
/**
 * Represents a two-dimensional vector.
 */
export class Vector2 {
    static createSignal(initial, interpolation = Vector2.lerp, owner) {
        return new CompoundSignalContext(['x', 'y'], (value) => new Vector2(value), initial, interpolation, owner).toSignal();
    }
    static lerp(from, to, value) {
        let valueX;
        let valueY;
        if (typeof value === 'number') {
            valueX = valueY = value;
        }
        else {
            valueX = value.x;
            valueY = value.y;
        }
        return new Vector2(map(from.x, to.x, valueX), map(from.y, to.y, valueY));
    }
    static arcLerp(from, to, value, reverse = false, ratio) {
        ratio ?? (ratio = from.sub(to).ctg);
        return Vector2.lerp(from, to, arcLerp(value, reverse, ratio));
    }
    static fromOrigin(origin) {
        const position = new Vector2();
        if (origin === Origin.Middle) {
            return position;
        }
        if (origin & Direction.Left) {
            position.x = -1;
        }
        else if (origin & Direction.Right) {
            position.x = 1;
        }
        if (origin & Direction.Top) {
            position.y = -1;
        }
        else if (origin & Direction.Bottom) {
            position.y = 1;
        }
        return position;
    }
    static fromScalar(value) {
        return new Vector2(value, value);
    }
    static fromRadians(radians) {
        return new Vector2(Math.cos(radians), Math.sin(radians));
    }
    /**
     * Return the angle in radians between the vector described by x and y and the
     * positive x-axis.
     *
     * @param x - The x component of the vector.
     * @param y - The y component of the vector.
     */
    static radians(x, y) {
        return Math.atan2(y, x);
    }
    /**
     * Return the angle in degrees between the vector described by x and y and the
     * positive x-axis.
     *
     * @param x - The x component of the vector.
     * @param y - The y component of the vector.
     *
     * @remarks
     * The returned angle will be between -180 and 180 degrees.
     */
    static degrees(x, y) {
        return (Vector2.radians(x, y) * 180) / Math.PI;
    }
    static magnitude(x, y) {
        return Math.sqrt(x * x + y * y);
    }
    static squaredMagnitude(x, y) {
        return x * x + y * y;
    }
    get width() {
        return this.x;
    }
    set width(value) {
        this.x = value;
    }
    get height() {
        return this.y;
    }
    set height(value) {
        this.y = value;
    }
    get magnitude() {
        return Vector2.magnitude(this.x, this.y);
    }
    get squaredMagnitude() {
        return Vector2.squaredMagnitude(this.x, this.y);
    }
    get normalized() {
        return this.scale(1 / Vector2.magnitude(this.x, this.y));
    }
    get safe() {
        return new Vector2(isNaN(this.x) ? 0 : this.x, isNaN(this.y) ? 0 : this.y);
    }
    get flipped() {
        return new Vector2(-this.x, -this.y);
    }
    get floored() {
        return new Vector2(Math.floor(this.x), Math.floor(this.y));
    }
    get perpendicular() {
        return new Vector2(this.y, -this.x);
    }
    /**
     * Return the angle in radians between the vector and the positive x-axis.
     */
    get radians() {
        return Vector2.radians(this.x, this.y);
    }
    /**
     * Return the angle in degrees between the vector and the positive x-axis.
     *
     * @remarks
     * The returned angle will be between -180 and 180 degrees.
     */
    get degrees() {
        return Vector2.degrees(this.x, this.y);
    }
    get ctg() {
        return this.x / this.y;
    }
    constructor(one, two) {
        this.x = 0;
        this.y = 0;
        if (one === undefined || one === null) {
            return;
        }
        if (typeof one !== 'object') {
            this.x = one;
            this.y = two ?? one;
            return;
        }
        if (Array.isArray(one)) {
            this.x = one[0];
            this.y = one[1];
            return;
        }
        if ('width' in one) {
            this.x = one.width;
            this.y = one.height;
            return;
        }
        this.x = one.x;
        this.y = one.y;
    }
    lerp(to, value) {
        return Vector2.lerp(this, to, value);
    }
    getOriginOffset(origin) {
        const offset = Vector2.fromOrigin(origin);
        offset.x *= this.x / 2;
        offset.y *= this.y / 2;
        return offset;
    }
    scale(value) {
        return new Vector2(this.x * value, this.y * value);
    }
    transformAsPoint(matrix) {
        return new Vector2(this.x * matrix.m11 + this.y * matrix.m21 + matrix.m41, this.x * matrix.m12 + this.y * matrix.m22 + matrix.m42);
    }
    transform(matrix) {
        return new Vector2(this.x * matrix.m11 + this.y * matrix.m21, this.x * matrix.m12 + this.y * matrix.m22);
    }
    mul(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x * vector.x, this.y * vector.y);
    }
    div(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x / vector.x, this.y / vector.y);
    }
    add(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x + vector.x, this.y + vector.y);
    }
    sub(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x - vector.x, this.y - vector.y);
    }
    dot(possibleVector) {
        const vector = new Vector2(possibleVector);
        return this.x * vector.x + this.y * vector.y;
    }
    addX(value) {
        return new Vector2(this.x + value, this.y);
    }
    addY(value) {
        return new Vector2(this.x, this.y + value);
    }
    toSymbol() {
        return Vector2.symbol;
    }
    serialize() {
        return { x: this.x, y: this.y };
    }
    /**
     * Check if two vectors are exactly equal to each other.
     *
     * @remarks
     * If you need to compensate for floating point inaccuracies, use the
     * {@link equals} method, instead.
     *
     * @param other - The vector to compare.
     */
    exactlyEquals(other) {
        return this.x === other.x && this.y === other.y;
    }
    /**
     * Check if two vectors are equal to each other.
     *
     * @remarks
     * This method allows passing an allowed error margin when comparing vectors
     * to compensate for floating point inaccuracies. To check if two vectors are
     * exactly equal, use the {@link exactlyEquals} method, instead.
     *
     * @param other - The vector to compare.
     * @param threshold - The allowed error threshold when comparing the vectors.
     */
    equals(other, threshold = EPSILON) {
        return (Math.abs(this.x - other.x) <= threshold + Number.EPSILON &&
            Math.abs(this.y - other.y) <= threshold + Number.EPSILON);
    }
}
Vector2.symbol = Symbol.for('@motion-canvas/core/types/Vector2');
Vector2.zero = new Vector2();
Vector2.one = new Vector2(1, 1);
Vector2.right = new Vector2(1, 0);
Vector2.left = new Vector2(-1, 0);
Vector2.up = new Vector2(0, 1);
Vector2.down = new Vector2(0, -1);
//# sourceMappingURL=data:application/json;base64,