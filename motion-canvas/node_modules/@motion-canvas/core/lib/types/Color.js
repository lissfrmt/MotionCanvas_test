import { Color, mix } from 'chroma-js';
import { SignalContext } from '../signals';
Color.symbol = Color.prototype.symbol = Symbol.for('@motion-canvas/core/types/Color');
Color.lerp = Color.prototype.lerp = (from, to, value, colorSpace = 'lch') => {
    if (typeof from === 'string') {
        from = new Color(from);
    }
    if (typeof to === 'string') {
        to = new Color(to);
    }
    const fromIsColor = from instanceof Color;
    const toIsColor = to instanceof Color;
    if (!fromIsColor) {
        from = toIsColor ? to.alpha(0) : new Color('rgba(0, 0, 0, 0)');
    }
    if (!toIsColor) {
        to = fromIsColor ? from.alpha(0) : new Color('rgba(0, 0, 0, 0)');
    }
    return mix(from, to, value, colorSpace);
};
Color.createLerp = Color.prototype.createLerp =
    (colorSpace) => (from, to, value) => Color.lerp(from, to, value, colorSpace);
Color.createSignal = (initial, interpolation = Color.lerp) => {
    const context = new SignalContext(initial, interpolation);
    context.setParser(value => new Color(value));
    return context.toSignal();
};
Color.prototype.toSymbol = () => {
    return Color.symbol;
};
Color.prototype.serialize = function () {
    return this.css();
};
Color.prototype.lerp = function (to, value, colorSpace) {
    return Color.lerp(this, to, value, colorSpace);
};
export { Color };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvQ29sb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBaUMsR0FBRyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR3BFLE9BQU8sRUFBUyxhQUFhLEVBQWMsTUFBTSxZQUFZLENBQUM7QUEyQzlELEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FDaEQsaUNBQWlDLENBQ2xDLENBQUM7QUFFRixLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQ2xDLElBQTJCLEVBQzNCLEVBQXlCLEVBQ3pCLEtBQWEsRUFDYixhQUFnQyxLQUFLLEVBQ3JDLEVBQUU7SUFDRixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7SUFDRCxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtRQUMxQixFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7SUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksS0FBSyxDQUFDO0lBQzFDLE1BQU0sU0FBUyxHQUFHLEVBQUUsWUFBWSxLQUFLLENBQUM7SUFFdEMsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBRSxFQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQzNFO0lBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFFLElBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDN0U7SUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBVyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RCxDQUFDLENBQUM7QUFFRixLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVTtJQUMzQyxDQUFDLFVBQTZCLEVBQUUsRUFBRSxDQUNsQyxDQUFDLElBQTJCLEVBQUUsRUFBeUIsRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUN4RSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTVDLEtBQUssQ0FBQyxZQUFZLEdBQUcsQ0FDbkIsT0FBb0MsRUFDcEMsZ0JBQThDLEtBQUssQ0FBQyxJQUFJLEVBQ3JDLEVBQUU7SUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzFELE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUM5QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDcEIsQ0FBQyxDQUFDO0FBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFFckIsRUFBUyxFQUNULEtBQWEsRUFDYixVQUF1QjtJQUV2QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDO0FBRUYsT0FBTyxFQUFDLEtBQUssRUFBQyxDQUFDIn0=