import { easeInOutCubic, tween, } from '../tweening';
import { errorToLog, useLogger } from '../utils';
import { run } from '../flow';
import { DependencyContext } from './DependencyContext';
import { isReactive } from './isReactive';
import { DEFAULT } from './symbols';
export class SignalContext extends DependencyContext {
    constructor(initial, interpolation, owner = undefined) {
        super(owner);
        this.initial = initial;
        this.interpolation = interpolation;
        this.parser = value => value;
        Object.defineProperty(this.invokable, 'reset', {
            value: this.reset.bind(this),
        });
        Object.defineProperty(this.invokable, 'save', {
            value: this.save.bind(this),
        });
        Object.defineProperty(this.invokable, 'isInitial', {
            value: this.isInitial.bind(this),
        });
        if (this.initial !== undefined) {
            this.current = this.initial;
            this.markDirty();
            if (!isReactive(this.initial)) {
                this.last = this.parse(this.initial);
            }
        }
    }
    toSignal() {
        return this.invokable;
    }
    parse(value) {
        return this.parser(value);
    }
    wrap(value) {
        return isReactive(value) ? () => this.parse(value()) : this.parse(value);
    }
    setInitial(value) {
        this.initial = value;
    }
    setParser(value) {
        this.parser = value;
        if (this.current !== undefined && !isReactive(this.current)) {
            this.last = this.parse(this.current);
        }
        this.markDirty();
    }
    set(value) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        if (this.current === value) {
            return this.owner;
        }
        this.current = value;
        this.markDirty();
        this.clearDependencies();
        if (!isReactive(value)) {
            this.last = this.parse(value);
        }
        return this.owner;
    }
    get() {
        if (this.event.isRaised() && isReactive(this.current)) {
            this.clearDependencies();
            this.startCollecting();
            try {
                this.last = this.parse(this.current());
            }
            catch (e) {
                useLogger().error({
                    ...errorToLog(e),
                    inspect: this.owner?.key,
                });
            }
            this.finishCollecting();
        }
        this.event.reset();
        this.collect();
        return this.last;
    }
    invoke(value, duration, timingFunction = easeInOutCubic, interpolationFunction = this.interpolation) {
        if (value === undefined) {
            return this.get();
        }
        if (duration === undefined) {
            return this.set(value);
        }
        return this.makeAnimate(timingFunction, interpolationFunction)(value, duration);
    }
    makeAnimate(defaultTimingFunction, defaultInterpolationFunction, before) {
        const animate = (value, duration, timingFunction = defaultTimingFunction, interpolationFunction = defaultInterpolationFunction) => {
            const tween = this.tween(value, duration, timingFunction, interpolationFunction);
            let task = tween;
            if (before) {
                task = run(function* () {
                    yield* before;
                    yield* tween;
                });
            }
            task.to = this.makeAnimate(timingFunction, interpolationFunction, task);
            return task;
        };
        return animate;
    }
    *tween(value, duration, timingFunction, interpolationFunction) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        yield* this.doTween(this.parse(isReactive(value) ? value() : value), duration, timingFunction, interpolationFunction);
        this.set(value);
    }
    *doTween(value, duration, timingFunction, interpolationFunction) {
        const from = this.get();
        yield* tween(duration, v => {
            this.set(interpolationFunction(from, value, timingFunction(v)));
        });
    }
    dispose() {
        super.dispose();
        this.initial = undefined;
        this.current = undefined;
        this.last = undefined;
    }
    /**
     * Reset the signal to its initial value (if one has been set).
     *
     * @example
     * ```ts
     * const signal = createSignal(7);
     *
     * signal.reset();
     * // same as:
     * signal(7);
     * ```
     */
    reset() {
        if (this.initial !== undefined) {
            this.set(this.initial);
        }
        return this.owner;
    }
    /**
     * Compute the current value of the signal and immediately set it.
     *
     * @remarks
     * This method can be used to stop the signal from updating while keeping its
     * current value.
     *
     * @example
     * ```ts
     * signal.save();
     * // same as:
     * signal(signal());
     * ```
     */
    save() {
        return this.set(this.get());
    }
    /**
     * Check if the signal is currently using its initial value.
     *
     * @example
     * ```ts
     *
     * const signal = createSignal(0);
     * signal.isInitial(); // true
     *
     * signal(5);
     * signal.isInitial(); // false
     *
     * signal(DEFAULT);
     * signal.isInitial(); // true
     * ```
     */
    isInitial() {
        this.collect();
        return this.current === this.initial;
    }
    /**
     * Get the raw value of this signal.
     *
     * @remarks
     * If the signal was provided with a factory function, the function itself
     * will be returned, without invoking it.
     *
     * This method can be used to create copies of signals.
     *
     * @example
     * ```ts
     * const a = createSignal(2);
     * const b = createSignal(() => a);
     * // b() == 2
     *
     * const bClone = createSignal(b.raw());
     * // bClone() == 2
     *
     * a(4);
     * // b() == 4
     * // bClone() == 4
     * ```
     */
    raw() {
        return this.current;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2lnbmFsQ29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWduYWxzL1NpZ25hbENvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFHZCxLQUFLLEdBQ04sTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFL0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM1QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQVF0RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFrQ2xDLE1BQU0sT0FBTyxhQUlYLFNBQVEsaUJBQXlCO0lBS2pDLFlBQ1UsT0FBOEMsRUFDckMsYUFBNEMsRUFDN0QsUUFBa0MsU0FBVTtRQUU1QyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFKTCxZQUFPLEdBQVAsT0FBTyxDQUF1QztRQUNyQyxrQkFBYSxHQUFiLGFBQWEsQ0FBK0I7UUFKckQsV0FBTSxHQUFvQyxLQUFLLENBQUMsRUFBRSxDQUFTLEtBQUssQ0FBQztRQVN6RSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFO1lBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDN0IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRTtZQUM1QyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzVCLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNB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