import { PlaybackManager, PlaybackState } from './PlaybackManager';
import { Stage } from './Stage';
import { EventDispatcher, ValueDispatcher } from '../events';
import { ImageExporter } from './ImageExporter';
import { Vector2 } from '../types';
import { PlaybackStatus } from './PlaybackStatus';
import { Semaphore } from '../utils';
import { ReadOnlyTimeEvents } from '../scenes/timeEvents';
export var RendererState;
(function (RendererState) {
    RendererState[RendererState["Initial"] = 0] = "Initial";
    RendererState[RendererState["Working"] = 1] = "Working";
    RendererState[RendererState["Aborting"] = 2] = "Aborting";
})(RendererState || (RendererState = {}));
export var RendererResult;
(function (RendererResult) {
    RendererResult[RendererResult["Success"] = 0] = "Success";
    RendererResult[RendererResult["Error"] = 1] = "Error";
    RendererResult[RendererResult["Aborted"] = 2] = "Aborted";
})(RendererResult || (RendererResult = {}));
/**
 * The rendering logic used by the editor to export animations.
 *
 * @remarks
 * This class uses the {@link PlaybackManager} to render animations.
 * In contrast to a player, a renderer does not use an update loop.
 * It plays through the animation as fast as it can, occasionally pausing
 * to keep the UI responsive.
 *
 * The actual exporting is outsourced to an {@link Exporter}.
 */
export class Renderer {
    get onStateChanged() {
        return this.state.subscribable;
    }
    get onFinished() {
        return this.finished.subscribable;
    }
    get onFrameChanged() {
        return this.frame.subscribable;
    }
    constructor(project) {
        this.project = project;
        this.state = new ValueDispatcher(RendererState.Initial);
        this.finished = new EventDispatcher();
        this.frame = new ValueDispatcher(0);
        this.stage = new Stage();
        this.lock = new Semaphore();
        this.exporter = new ImageExporter(this.project.logger);
        this.abortController = null;
        this.playback = new PlaybackManager();
        this.status = new PlaybackStatus(this.playback);
        const scenes = [];
        for (const description of project.scenes) {
            const scene = new description.klass({
                ...description,
                meta: description.meta.clone(),
                logger: this.project.logger,
                playback: this.status,
                size: new Vector2(1920, 1080),
                resolutionScale: 1,
                timeEventsClass: ReadOnlyTimeEvents,
            });
            scenes.push(scene);
        }
        this.playback.setup(scenes);
    }
    /**
     * Render the animation using the provided settings.
     *
     * @param settings - The rendering settings.
     */
    async render(settings) {
        if (this.state.current !== RendererState.Initial)
            return;
        await this.lock.acquire();
        this.state.current = RendererState.Working;
        let result;
        try {
            this.abortController = new AbortController();
            result = await this.run(settings, this.abortController.signal);
        }
        catch (e) {
            this.project.logger.error(e);
            result = RendererResult.Error;
        }
        this.state.current = RendererState.Initial;
        this.finished.dispatch(result);
        this.lock.release();
    }
    /**
     * Abort the ongoing render process.
     */
    abort() {
        if (this.state.current !== RendererState.Working)
            return;
        this.abortController?.abort();
        this.state.current = RendererState.Aborting;
    }
    /**
     * Export an individual frame.
     *
     * @remarks
     * This method always uses the default {@link ImageExporter}.
     *
     * @param settings - The rendering settings.
     * @param frame - The frame to export.
     */
    async renderFrame(settings, frame) {
        await this.lock.acquire();
        try {
            this.stage.configure(settings);
            this.playback.fps = settings.fps;
            this.playback.state = PlaybackState.Rendering;
            await this.reloadScenes(settings);
            await this.playback.reset();
            await this.playback.seek(this.status.secondsToFrames(settings.range[0]));
            await this.stage.render(this.playback.currentScene, this.playback.previousScene);
            if (import.meta.hot) {
                import.meta.hot.send('motion-canvas:export', {
                    frame,
                    data: this.stage.finalBuffer.toDataURL('image/png'),
                    mimeType: 'image/png',
                    subDirectories: ['still', this.project.name],
                });
            }
        }
        catch (e) {
            this.project.logger.error(e);
        }
        this.lock.release();
    }
    async run(settings, signal) {
        settings = (await this.exporter.configure(settings)) ?? settings;
        this.stage.configure(settings);
        this.playback.fps = settings.fps;
        this.playback.state = PlaybackState.Rendering;
        const from = this.status.secondsToFrames(settings.range[0]);
        const to = this.status.secondsToFrames(settings.range[1]);
        await this.reloadScenes(settings);
        await this.playback.recalculate();
        if (signal.aborted)
            return RendererResult.Aborted;
        await this.playback.reset();
        if (signal.aborted)
            return RendererResult.Aborted;
        await this.playback.seek(from);
        if (signal.aborted)
            return RendererResult.Aborted;
        await this.exporter.start();
        let lastRefresh = performance.now();
        let result = RendererResult.Success;
        try {
            await this.exportFrame(signal);
            if (signal.aborted) {
                result = RendererResult.Aborted;
            }
            else {
                let finished = false;
                while (!finished) {
                    await this.playback.progress();
                    await this.exportFrame(signal);
                    if (performance.now() - lastRefresh > 1 / 30) {
                        lastRefresh = performance.now();
                        await new Promise(resolve => setTimeout(resolve, 0));
                    }
                    if (this.playback.finished || this.playback.frame >= to) {
                        finished = true;
                    }
                    if (signal.aborted) {
                        result = RendererResult.Aborted;
                        finished = true;
                    }
                }
            }
        }
        catch (e) {
            this.project.logger.error(e);
            result = RendererResult.Error;
        }
        await this.exporter.stop(result);
        return result;
    }
    async reloadScenes(settings) {
        for (let i = 0; i < this.project.scenes.length; i++) {
            const description = this.project.scenes[i];
            const scene = this.playback.onScenesRecalculated.current[i];
            scene.reload({
                config: description.onReplaced.current.config,
                size: settings.size,
                resolutionScale: settings.resolutionScale,
            });
            scene.meta.set(description.meta.get());
        }
    }
    async exportFrame(signal) {
        this.frame.current = this.playback.frame;
        await this.stage.render(this.playback.currentScene, this.playback.previousScene);
        const sceneFrame = this.playback.frame - this.playback.currentScene.firstFrame;
        await this.exporter.handleFrame(this.stage.finalBuffer, this.playback.frame, sceneFrame, this.playback.currentScene.name, signal);
    }
}
//# sourceMappingURL=data:application/json;base64,