import { BoolMetaField, EnumMetaField, NumberMetaField, ObjectMetaField, } from '../meta';
import { clamp } from '../tweening';
import { FileTypes } from './presets';
const EXPORT_FRAME_LIMIT = 256;
const EXPORT_RETRY_DELAY = 1000;
/**
 * Image sequence exporter.
 */
export class ImageExporter {
    constructor(logger) {
        this.logger = logger;
        this.name = 'image sequence';
        this.frameLookup = new Map();
        this.frameCounter = 0;
        this.projectName = 'unknown';
        this.quality = 1;
        this.fileType = 'image/png';
        this.groupByScene = false;
        if (import.meta.hot) {
            import.meta.hot.on('motion-canvas:export-ack', ({ frame }) => {
                this.frameLookup.get(frame)?.();
            });
        }
    }
    meta() {
        const meta = new ObjectMetaField(this.name, {
            fileType: new EnumMetaField('file type', FileTypes),
            quality: new NumberMetaField('quality', 100).setRange(0, 100),
            groupByScene: new BoolMetaField('group by scene', false),
        });
        meta.fileType.onChanged.subscribe(value => {
            meta.quality.disable(value === 'image/png');
        });
        return meta;
    }
    async configure(settings) {
        const options = settings.exporter.options;
        this.projectName = settings.name;
        this.quality = clamp(0, 1, options.quality / 100);
        this.fileType = options.fileType;
        this.groupByScene = options.groupByScene;
    }
    async start() {
        this.frameLookup.clear();
    }
    async handleFrame(canvas, frame, sceneFrame, sceneName, signal) {
        if (this.frameLookup.has(frame)) {
            this.logger.warn(`Frame no. ${frame} is already being exported.`);
            return;
        }
        if (import.meta.hot) {
            while (this.frameCounter > EXPORT_FRAME_LIMIT) {
                await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
                if (signal.aborted) {
                    return;
                }
            }
            this.frameCounter++;
            this.frameLookup.set(frame, () => {
                this.frameCounter--;
                this.frameLookup.delete(frame);
            });
            import.meta.hot.send('motion-canvas:export', {
                frame,
                sceneFrame,
                data: canvas.toDataURL(this.fileType, this.quality),
                mimeType: this.fileType,
                subDirectories: this.groupByScene
                    ? [this.projectName, sceneName]
                    : [this.projectName],
                groupByScene: this.groupByScene,
            });
        }
    }
    async stop() {
        while (this.frameCounter > 0) {
            await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VFeHBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHAvSW1hZ2VFeHBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixlQUFlLEVBQ2YsZUFBZSxHQUVoQixNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFcEMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUM7QUFJaEM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQVV4QixZQUFvQyxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVRsQyxTQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFFdkIsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBb0IsQ0FBQztRQUNuRCxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQUNqQixnQkFBVyxHQUFHLFNBQVMsQ0FBQztRQUN4QixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osYUFBUSxHQUF5QixXQUFXLENBQUM7UUFDN0MsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFHM0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUU7Z0JBQ3pELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLElBQUk7UUFDVCxNQUFNLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFB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